#!/usr/bin/env ruby

# frozen_string_literal: true

require 'optparse'
require 'rb-inotify'

require_relative '../lib/living_document.rb'

parser = OptionParser.new
parser.on('-v', '--version', 'Print the version') do
  puts(LivingDocument::VERSION)
  exit(0)
end
parser.parse!

# rubocop:disable Style/TopLevelMethodDefinition
def evaluate_code_and_update_source_file(file_path, evaluation_reason:)
  print("#{Time.now.iso8601} #{evaluation_reason} ... ")
  # NOTE: This sleep seems to be necessary to interact reliably with VS Code.
  sleep(0.015)
  code_in_file = File.read(file_path)

  print('running code ... ')
  code_to_write =
    LivingDocument::DocumentEvaluator.new(
      document: code_in_file,
    ).evaluated_document

  # NOTE: This sleep seems to be necessary to interact reliably with VS Code.
  sleep(0.015)
  print('writing file ... ')
  File.write(file_path, code_to_write)

  puts('waiting for changes.')
end
# rubocop:enable Style/TopLevelMethodDefinition

file_path = ARGV[0]

if file_path.nil?
  puts('You must provide a file path argument, e.g. `livdoc personal/ruby.rb`.')
  exit(1)
end

expanded_path = File.expand_path(file_path)
notifier = INotify::Notifier.new
last_file_update = Time.now

notifier.watch(expanded_path, :modify) do |_event|
  # Don't enter infinitely recursive loop, since the code below triggers file updates.
  # After file has been updated, wait at least 0.2 seconds before listener processes again.
  next if (Time.now - last_file_update) < 0.2

  evaluate_code_and_update_source_file(expanded_path, evaluation_reason: 'Detected file change')

  last_file_update = Time.now
end

at_exit do
  print('Stopping listener ... ')
  notifier.close
  puts('done.')
end

system('clear')
evaluate_code_and_update_source_file(expanded_path, evaluation_reason: 'Launching')

begin
  notifier.run
rescue Interrupt
  # Exit gracefully, having run `at_exit` block.
end
